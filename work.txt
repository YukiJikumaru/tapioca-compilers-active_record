# [sorbet-rails](https://github.com/chanzuckerberg/sorbet-rails)

class Post < ::ApplicationRecord
  include Post::GeneratedAttributeMethods
  include Post::GeneratedAssociationMethods
  # extend Post::CustomFinderMethods
  extend Post::QueryMethodsReturningRelation

class Post::ActiveRecord_Relation < ::ActiveRecord::Relation
  include Post::ActiveRelation_WhereNot
  # include Post::CustomFinderMethods
  include Post::QueryMethodsReturningRelation

class Post::ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
  # include Post::CustomFinderMethods
  include Post::QueryMethodsReturningAssociationRelation

class Post::ActiveRecord_AssociationRelation < ::ActiveRecord::AssociationRelation
  include Post::ActiveRelation_WhereNot
  # include Post::CustomFinderMethods
  include Post::QueryMethodsReturningAssociationRelation

class Post::ActiveRecord_DisableJoinsAssociationRelation < ::ActiveRecord::DisableJoinsAssociationRelation
  include Post::ActiveRelation_WhereNot
  # include Post::CustomFinderMethods
  include Post::QueryMethodsReturningAssociationRelation

include GeneratedRelationMethods

# ActiveRecordに生えてくるの

Post::ActiveRecord_Relation < ActiveRecord::Relation
  include GeneratedRelationMethods
Post::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include GeneratedRelationMethods
Post::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  include GeneratedRelationMethods
Post::ActiveRecord_DisableJoinsAssociationRelation < ActiveRecord::DisableJoinsAssociationRelation
  include GeneratedRelationMethods












https://api.rubyonrails.org/classes/ActiveRecord/FinderMethods.html#method-i-find
ActiveRecord::Base#find(*args)
sig { params(args: T.untyped).returns(T.attached_class) }
sig { params(args: T.untyped).returns(T.any(T.attached_class, T::Array[T.attached_class])) }
sig { params(args: T.any(::Integer, ::String, T::Array[T.any(::Integer, ::String)])).returns(T.any(T.attached_class, T::Array[T.attached_class])) }

https://api.rubyonrails.org/classes/ActiveRecord/FinderMethods.html#method-i-first
ActiveRecord::Base#first(limit = nil)
sig { returns(T.attached_class) }
sig { params(limit: T.nilable(::Integer)).returns(T.any(T.attached_class, T::Array[T.attached_class])) }

https://api.rubyonrails.org/classes/ActiveRecord/FinderMethods.html#method-i-last
ActiveRecord::Base#last(limit = nil)
sig { returns(T.attached_class) }
sig { params(limit: T.nilable(::Integer)).returns(T.any(T.attached_class, T::Array[T.attached_class])) }



activerecord-7.1.1/lib/active_record/relation.rb
def new(attributes = nil, &block)
alias build new
def create(attributes = nil, &block)
def create!(attributes = nil, &block)
def find_or_create_by(attributes, &block)
def find_or_create_by!(attributes, &block)
def create_or_find_by(attributes, &block)
def create_or_find_by!(attributes, &block)
def find_or_initialize_by(attributes, &block)
def explain(*options)
def to_ary
alias to_a to_ary
def encode_with(coder)
def size
def empty?
def none?(*args)
def any?(*args)
def one?(*args)
def many?
def cache_key(timestamp_column = "updated_at")
def cache_version(timestamp_column = :updated_at)
def cache_key_with_version
def scoping(all_queries: nil, &block)
def update_all(updates)
def update(id = :all, attributes) # :nodoc:
def update!(id = :all, attributes) # :nodoc:
def update_counters(counters)
def touch_all(*names, time: nil)
def destroy_all
def delete_all
def destroy_by(*args)
def delete_by(*args)
def load_async
def scheduled?
def load(&block)
def reload
def reset
def to_sql
def scope_for_create
def eager_loading?
def joined_includes_values
def ==(other)
def pretty_print(pp)
def blank?
def values
def inspect
